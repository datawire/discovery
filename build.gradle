import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
  ext.kotlinVersion = '1.0.2'
  ext.shadowPluginVersion = '1.2.3'
  ext.dockerPluginVersion = '1.2'

  repositories {
    jcenter()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
    classpath "se.transmode.gradle:gradle-docker:${dockerPluginVersion}"
  }
}

if (!JavaVersion.current().java8Compatible) {
  throw new IllegalArgumentException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Upgrade. Try again.'''.stripMargin())
}

ext {
  assertjVersion    = '3.3.0'
  guavaVersion      = '19.0'
  hazelcastVersion  = '3.6.2'
  junitVersion      = '4.12'
  logbackVersion    = '1.1.7'
  vertxVersion      = '3.3.0'
}

allprojects {
  apply plugin: 'base'

  version = version + "-${ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("uuuuMMddHHmmss"))}"

  repositories {
    jcenter()
  }
}

subprojects {
  apply plugin: 'kotlin'

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  repositories {
    jcenter()
  }

  dependencies {
    compile     group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion

    testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
    testCompile group: 'junit',       name: 'junit',        version: junitVersion
  }

  tasks.withType(Tar) {
    compression = Compression.GZIP
  }
}

clean {
  delete fileTree("${projectDir}/quark") {
    include '**/*.qc'
  }
}

task dockerize(type: Exec, dependsOn: [':discovery-web:clean', ':discovery-web:shadowJar']) {
  description 'Creates a runnable Docker image containing Discovery'

  workingDir project.projectDir
  executable 'docker'
  args "build", "-t", "datawire/discovery:${version}".toString(), "-t", "datawire/discovery:${version.split("-")[0]}", "."
}

task runDockerized(type: Exec) {
  description 'Runs Discovery inside a Docker container'

  workingDir project.projectDir
  executable 'docker'
  args "run --rm=true --name disco -p 52689:52689 -e APP_ENV=local -v ${projectDir}/discovery-web/config:/opt/discovery/config datawire/discovery:${version.split("-")[0]}".split(' ') as List
}

task version << {
  println version
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}